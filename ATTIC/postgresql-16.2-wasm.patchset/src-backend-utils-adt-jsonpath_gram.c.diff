--- postgresql-16.2/src/backend/utils/adt/jsonpath_gram.c	2024-02-05 22:52:21.000000000 +0100
+++ postgresql-16.2-wasm/src/backend/utils/adt/jsonpath_gram.c	2024-05-06 08:21:14.511557428 +0200
@@ -1,4 +1,4 @@
-/* A Bison parser, made by GNU Bison 3.7.5.  */
+/* A Bison parser, made by GNU Bison 3.8.2.  */
 
 /* Bison implementation for Yacc-like parsers in C
 
@@ -16,7 +16,7 @@
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
-   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */
 
 /* As a special exception, you may create a larger work that contains
    part or all of the Bison parser skeleton and distribute that work
@@ -46,10 +46,10 @@
    USER NAME SPACE" below.  */
 
 /* Identify Bison output, and Bison version.  */
-#define YYBISON 30705
+#define YYBISON 30802
 
 /* Bison version string.  */
-#define YYBISON_VERSION "3.7.5"
+#define YYBISON_VERSION "3.8.2"
 
 /* Skeleton name.  */
 #define YYSKELETON_NAME "yacc.c"
@@ -393,12 +393,18 @@
 # define YY_USE(E) /* empty */
 #endif
 
-#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
 /* Suppress an incorrect diagnostic about yylval being uninitialized.  */
-# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
+#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
+# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
+#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
+    _Pragma ("GCC diagnostic push")                                     \
+    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
+# else
+#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
     _Pragma ("GCC diagnostic push")                                     \
     _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
     _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
+# endif
 # define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
     _Pragma ("GCC diagnostic pop")
 #else
@@ -616,7 +622,7 @@
 };
 
 #if YYDEBUG
-  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
+/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
 static const yytype_int16 yyrline[] =
 {
        0,   117,   117,   123,   127,   128,   132,   133,   134,   138,
@@ -669,20 +675,6 @@
 }
 #endif
 
-#ifdef YYPRINT
-/* YYTOKNUM[NUM] -- (External) token number corresponding to the
-   (internal) symbol number NUM (which must be that of a token).  */
-static const yytype_int16 yytoknum[] =
-{
-       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
-     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
-     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
-     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
-      43,    45,    42,    47,    37,   295,    40,    41,    36,    64,
-      44,    91,    93,   123,   125,    46,    63
-};
-#endif
-
 #define YYPACT_NINF (-44)
 
 #define yypact_value_is_default(Yyn) \
@@ -693,8 +685,8 @@
 #define yytable_value_is_error(Yyn) \
   0
 
-  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
-     STATE-NUM.  */
+/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
+   STATE-NUM.  */
 static const yytype_int16 yypact[] =
 {
        7,   -44,   -44,    18,    51,   -44,   -44,   -44,   -44,   -43,
@@ -714,9 +706,9 @@
      -44,    82,   -44
 };
 
-  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
-     Performed when YYTABLE does not specify something else to do.  Zero
-     means the default is an error.  */
+/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
+   Performed when YYTABLE does not specify something else to do.  Zero
+   means the default is an error.  */
 static const yytype_int8 yydefact[] =
 {
        8,     6,     7,     0,     0,     1,    10,    11,    12,     0,
@@ -736,7 +728,7 @@
       68,     0,    62
 };
 
-  /* YYPGOTO[NTERM-NUM].  */
+/* YYPGOTO[NTERM-NUM].  */
 static const yytype_int8 yypgoto[] =
 {
      -44,   -44,   -44,   -44,   -44,   -44,   124,   -14,   -44,   -44,
@@ -744,7 +736,7 @@
      -44,   -44,   -44
 };
 
-  /* YYDEFGOTO[NTERM-NUM].  */
+/* YYDEFGOTO[NTERM-NUM].  */
 static const yytype_uint8 yydefgoto[] =
 {
        0,     3,    21,     4,    22,    56,    23,    24,   124,    25,
@@ -752,9 +744,9 @@
       96,    97,    98
 };
 
-  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
-     positive, shift that token.  If negative, reduce the rule whose
-     number is the opposite.  If YYTABLE_NINF, syntax error.  */
+/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
+   positive, shift that token.  If negative, reduce the rule whose
+   number is the opposite.  If YYTABLE_NINF, syntax error.  */
 static const yytype_int16 yytable[] =
 {
       27,   115,   138,    28,    34,   129,     9,    -3,    42,   116,
@@ -811,8 +803,8 @@
       -1,    -1,    -1,    -1,    -1,    40,    41,    42,    43,    44
 };
 
-  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
-     symbol of state STATE-NUM.  */
+/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
+   state STATE-NUM.  */
 static const yytype_int8 yystos[] =
 {
        0,    25,    26,    58,    60,     0,     4,     5,     6,     9,
@@ -832,7 +824,7 @@
       47,    72,    54
 };
 
-  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
+/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
 static const yytype_int8 yyr1[] =
 {
        0,    57,    58,    58,    59,    59,    60,    60,    60,    61,
@@ -848,7 +840,7 @@
       79,    79,    79,    79,    79
 };
 
-  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
+/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
 static const yytype_int8 yyr2[] =
 {
        0,     2,     2,     0,     1,     1,     1,     1,     0,     1,
@@ -873,6 +865,7 @@
 #define YYACCEPT        goto yyacceptlab
 #define YYABORT         goto yyabortlab
 #define YYERROR         goto yyerrorlab
+#define YYNOMEM         goto yyexhaustedlab
 
 
 #define YYRECOVERING()  (!!yyerrstatus)
@@ -913,10 +906,7 @@
     YYFPRINTF Args;                             \
 } while (0)
 
-/* This macro is provided for backward compatibility. */
-# ifndef YY_LOCATION_PRINT
-#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
-# endif
+
 
 
 # define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
@@ -945,10 +935,6 @@
   YY_USE (escontext);
   if (!yyvaluep)
     return;
-# ifdef YYPRINT
-  if (yykind < YYNTOKENS)
-    YYPRINT (yyo, yytoknum[yykind], *yyvaluep);
-# endif
   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   YY_USE (yykind);
   YY_IGNORE_MAYBE_UNINITIALIZED_END
@@ -1141,6 +1127,7 @@
   YYDPRINTF ((stderr, "Starting parse\n"));
 
   yychar = YYEMPTY; /* Cause a token to be read.  */
+
   goto yysetstate;
 
 
@@ -1166,7 +1153,7 @@
 
   if (yyss + yystacksize - 1 <= yyssp)
 #if !defined yyoverflow && !defined YYSTACK_RELOCATE
-    goto yyexhaustedlab;
+    YYNOMEM;
 #else
     {
       /* Get the current used size of the three stacks, in elements.  */
@@ -1194,7 +1181,7 @@
 # else /* defined YYSTACK_RELOCATE */
       /* Extend the stack our own way.  */
       if (YYMAXDEPTH <= yystacksize)
-        goto yyexhaustedlab;
+        YYNOMEM;
       yystacksize *= 2;
       if (YYMAXDEPTH < yystacksize)
         yystacksize = YYMAXDEPTH;
@@ -1205,7 +1192,7 @@
           YY_CAST (union yyalloc *,
                    YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
         if (! yyptr)
-          goto yyexhaustedlab;
+          YYNOMEM;
         YYSTACK_RELOCATE (yyss_alloc, yyss);
         YYSTACK_RELOCATE (yyvs_alloc, yyvs);
 #  undef YYSTACK_RELOCATE
@@ -1227,6 +1214,7 @@
     }
 #endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */
 
+
   if (yystate == YYFINAL)
     YYACCEPT;
 
@@ -1346,175 +1334,175 @@
 										(*result)->lax = (yyvsp[-1].boolean);
 										(void) yynerrs;
 									}
-#line 1350 "jsonpath_gram.c"
+#line 1338 "jsonpath_gram.c"
     break;
 
   case 3: /* result: %empty  */
 #line 123 "jsonpath_gram.y"
                                                         { *result = NULL; }
-#line 1356 "jsonpath_gram.c"
+#line 1344 "jsonpath_gram.c"
     break;
 
   case 4: /* expr_or_predicate: expr  */
 #line 127 "jsonpath_gram.y"
                                                                 { (yyval.value) = (yyvsp[0].value); }
-#line 1362 "jsonpath_gram.c"
+#line 1350 "jsonpath_gram.c"
     break;
 
   case 5: /* expr_or_predicate: predicate  */
 #line 128 "jsonpath_gram.y"
                                                                 { (yyval.value) = (yyvsp[0].value); }
-#line 1368 "jsonpath_gram.c"
+#line 1356 "jsonpath_gram.c"
     break;
 
   case 6: /* mode: STRICT_P  */
 #line 132 "jsonpath_gram.y"
                                                                 { (yyval.boolean) = false; }
-#line 1374 "jsonpath_gram.c"
+#line 1362 "jsonpath_gram.c"
     break;
 
   case 7: /* mode: LAX_P  */
 #line 133 "jsonpath_gram.y"
                                                                 { (yyval.boolean) = true; }
-#line 1380 "jsonpath_gram.c"
+#line 1368 "jsonpath_gram.c"
     break;
 
   case 8: /* mode: %empty  */
 #line 134 "jsonpath_gram.y"
                                                         { (yyval.boolean) = true; }
-#line 1386 "jsonpath_gram.c"
+#line 1374 "jsonpath_gram.c"
     break;
 
   case 9: /* scalar_value: STRING_P  */
 #line 138 "jsonpath_gram.y"
                                                                 { (yyval.value) = makeItemString(&(yyvsp[0].str)); }
-#line 1392 "jsonpath_gram.c"
+#line 1380 "jsonpath_gram.c"
     break;
 
   case 10: /* scalar_value: NULL_P  */
 #line 139 "jsonpath_gram.y"
                                                                 { (yyval.value) = makeItemString(NULL); }
-#line 1398 "jsonpath_gram.c"
+#line 1386 "jsonpath_gram.c"
     break;
 
   case 11: /* scalar_value: TRUE_P  */
 #line 140 "jsonpath_gram.y"
                                                                 { (yyval.value) = makeItemBool(true); }
-#line 1404 "jsonpath_gram.c"
+#line 1392 "jsonpath_gram.c"
     break;
 
   case 12: /* scalar_value: FALSE_P  */
 #line 141 "jsonpath_gram.y"
                                                                 { (yyval.value) = makeItemBool(false); }
-#line 1410 "jsonpath_gram.c"
+#line 1398 "jsonpath_gram.c"
     break;
 
   case 13: /* scalar_value: NUMERIC_P  */
 #line 142 "jsonpath_gram.y"
                                                                 { (yyval.value) = makeItemNumeric(&(yyvsp[0].str)); }
-#line 1416 "jsonpath_gram.c"
+#line 1404 "jsonpath_gram.c"
     break;
 
   case 14: /* scalar_value: INT_P  */
 #line 143 "jsonpath_gram.y"
                                                                 { (yyval.value) = makeItemNumeric(&(yyvsp[0].str)); }
-#line 1422 "jsonpath_gram.c"
+#line 1410 "jsonpath_gram.c"
     break;
 
   case 15: /* scalar_value: VARIABLE_P  */
 #line 144 "jsonpath_gram.y"
                                                         { (yyval.value) = makeItemVariable(&(yyvsp[0].str)); }
-#line 1428 "jsonpath_gram.c"
+#line 1416 "jsonpath_gram.c"
     break;
 
   case 16: /* comp_op: EQUAL_P  */
 #line 148 "jsonpath_gram.y"
                                                                 { (yyval.optype) = jpiEqual; }
-#line 1434 "jsonpath_gram.c"
+#line 1422 "jsonpath_gram.c"
     break;
 
   case 17: /* comp_op: NOTEQUAL_P  */
 #line 149 "jsonpath_gram.y"
                                                         { (yyval.optype) = jpiNotEqual; }
-#line 1440 "jsonpath_gram.c"
+#line 1428 "jsonpath_gram.c"
     break;
 
   case 18: /* comp_op: LESS_P  */
 #line 150 "jsonpath_gram.y"
                                                                 { (yyval.optype) = jpiLess; }
-#line 1446 "jsonpath_gram.c"
+#line 1434 "jsonpath_gram.c"
     break;
 
   case 19: /* comp_op: GREATER_P  */
 #line 151 "jsonpath_gram.y"
                                                                 { (yyval.optype) = jpiGreater; }
-#line 1452 "jsonpath_gram.c"
+#line 1440 "jsonpath_gram.c"
     break;
 
   case 20: /* comp_op: LESSEQUAL_P  */
 #line 152 "jsonpath_gram.y"
                                                         { (yyval.optype) = jpiLessOrEqual; }
-#line 1458 "jsonpath_gram.c"
+#line 1446 "jsonpath_gram.c"
     break;
 
   case 21: /* comp_op: GREATEREQUAL_P  */
 #line 153 "jsonpath_gram.y"
                                                         { (yyval.optype) = jpiGreaterOrEqual; }
-#line 1464 "jsonpath_gram.c"
+#line 1452 "jsonpath_gram.c"
     break;
 
   case 22: /* delimited_predicate: '(' predicate ')'  */
 #line 157 "jsonpath_gram.y"
                                                         { (yyval.value) = (yyvsp[-1].value); }
-#line 1470 "jsonpath_gram.c"
+#line 1458 "jsonpath_gram.c"
     break;
 
   case 23: /* delimited_predicate: EXISTS_P '(' expr ')'  */
 #line 158 "jsonpath_gram.y"
                                                 { (yyval.value) = makeItemUnary(jpiExists, (yyvsp[-1].value)); }
-#line 1476 "jsonpath_gram.c"
+#line 1464 "jsonpath_gram.c"
     break;
 
   case 24: /* predicate: delimited_predicate  */
 #line 162 "jsonpath_gram.y"
                                                         { (yyval.value) = (yyvsp[0].value); }
-#line 1482 "jsonpath_gram.c"
+#line 1470 "jsonpath_gram.c"
     break;
 
   case 25: /* predicate: expr comp_op expr  */
 #line 163 "jsonpath_gram.y"
                                                         { (yyval.value) = makeItemBinary((yyvsp[-1].optype), (yyvsp[-2].value), (yyvsp[0].value)); }
-#line 1488 "jsonpath_gram.c"
+#line 1476 "jsonpath_gram.c"
     break;
 
   case 26: /* predicate: predicate AND_P predicate  */
 #line 164 "jsonpath_gram.y"
                                                 { (yyval.value) = makeItemBinary(jpiAnd, (yyvsp[-2].value), (yyvsp[0].value)); }
-#line 1494 "jsonpath_gram.c"
+#line 1482 "jsonpath_gram.c"
     break;
 
   case 27: /* predicate: predicate OR_P predicate  */
 #line 165 "jsonpath_gram.y"
                                                 { (yyval.value) = makeItemBinary(jpiOr, (yyvsp[-2].value), (yyvsp[0].value)); }
-#line 1500 "jsonpath_gram.c"
+#line 1488 "jsonpath_gram.c"
     break;
 
   case 28: /* predicate: NOT_P delimited_predicate  */
 #line 166 "jsonpath_gram.y"
                                                 { (yyval.value) = makeItemUnary(jpiNot, (yyvsp[0].value)); }
-#line 1506 "jsonpath_gram.c"
+#line 1494 "jsonpath_gram.c"
     break;
 
   case 29: /* predicate: '(' predicate ')' IS_P UNKNOWN_P  */
 #line 168 "jsonpath_gram.y"
                                                                         { (yyval.value) = makeItemUnary(jpiIsUnknown, (yyvsp[-3].value)); }
-#line 1512 "jsonpath_gram.c"
+#line 1500 "jsonpath_gram.c"
     break;
 
   case 30: /* predicate: expr STARTS_P WITH_P starts_with_initial  */
 #line 170 "jsonpath_gram.y"
                                                                         { (yyval.value) = makeItemBinary(jpiStartsWith, (yyvsp[-3].value), (yyvsp[0].value)); }
-#line 1518 "jsonpath_gram.c"
+#line 1506 "jsonpath_gram.c"
     break;
 
   case 31: /* predicate: expr LIKE_REGEX_P STRING_P  */
@@ -1525,7 +1513,7 @@
 			YYABORT;
 		(yyval.value) = jppitem;
 	}
-#line 1529 "jsonpath_gram.c"
+#line 1517 "jsonpath_gram.c"
     break;
 
   case 32: /* predicate: expr LIKE_REGEX_P STRING_P FLAG_P STRING_P  */
@@ -1536,299 +1524,299 @@
 			YYABORT;
 		(yyval.value) = jppitem;
 	}
-#line 1540 "jsonpath_gram.c"
+#line 1528 "jsonpath_gram.c"
     break;
 
   case 33: /* starts_with_initial: STRING_P  */
 #line 188 "jsonpath_gram.y"
                                                                 { (yyval.value) = makeItemString(&(yyvsp[0].str)); }
-#line 1546 "jsonpath_gram.c"
+#line 1534 "jsonpath_gram.c"
     break;
 
   case 34: /* starts_with_initial: VARIABLE_P  */
 #line 189 "jsonpath_gram.y"
                                                         { (yyval.value) = makeItemVariable(&(yyvsp[0].str)); }
-#line 1552 "jsonpath_gram.c"
+#line 1540 "jsonpath_gram.c"
     break;
 
   case 35: /* path_primary: scalar_value  */
 #line 193 "jsonpath_gram.y"
                                                         { (yyval.value) = (yyvsp[0].value); }
-#line 1558 "jsonpath_gram.c"
+#line 1546 "jsonpath_gram.c"
     break;
 
   case 36: /* path_primary: '$'  */
 #line 194 "jsonpath_gram.y"
                                                                 { (yyval.value) = makeItemType(jpiRoot); }
-#line 1564 "jsonpath_gram.c"
+#line 1552 "jsonpath_gram.c"
     break;
 
   case 37: /* path_primary: '@'  */
 #line 195 "jsonpath_gram.y"
                                                                 { (yyval.value) = makeItemType(jpiCurrent); }
-#line 1570 "jsonpath_gram.c"
+#line 1558 "jsonpath_gram.c"
     break;
 
   case 38: /* path_primary: LAST_P  */
 #line 196 "jsonpath_gram.y"
                                                                 { (yyval.value) = makeItemType(jpiLast); }
-#line 1576 "jsonpath_gram.c"
+#line 1564 "jsonpath_gram.c"
     break;
 
   case 39: /* accessor_expr: path_primary  */
 #line 200 "jsonpath_gram.y"
                                                         { (yyval.elems) = list_make1((yyvsp[0].value)); }
-#line 1582 "jsonpath_gram.c"
+#line 1570 "jsonpath_gram.c"
     break;
 
   case 40: /* accessor_expr: '(' expr ')' accessor_op  */
 #line 201 "jsonpath_gram.y"
                                                 { (yyval.elems) = list_make2((yyvsp[-2].value), (yyvsp[0].value)); }
-#line 1588 "jsonpath_gram.c"
+#line 1576 "jsonpath_gram.c"
     break;
 
   case 41: /* accessor_expr: '(' predicate ')' accessor_op  */
 #line 202 "jsonpath_gram.y"
                                         { (yyval.elems) = list_make2((yyvsp[-2].value), (yyvsp[0].value)); }
-#line 1594 "jsonpath_gram.c"
+#line 1582 "jsonpath_gram.c"
     break;
 
   case 42: /* accessor_expr: accessor_expr accessor_op  */
 #line 203 "jsonpath_gram.y"
                                                 { (yyval.elems) = lappend((yyvsp[-1].elems), (yyvsp[0].value)); }
-#line 1600 "jsonpath_gram.c"
+#line 1588 "jsonpath_gram.c"
     break;
 
   case 43: /* expr: accessor_expr  */
 #line 207 "jsonpath_gram.y"
                                                         { (yyval.value) = makeItemList((yyvsp[0].elems)); }
-#line 1606 "jsonpath_gram.c"
+#line 1594 "jsonpath_gram.c"
     break;
 
   case 44: /* expr: '(' expr ')'  */
 #line 208 "jsonpath_gram.y"
                                                         { (yyval.value) = (yyvsp[-1].value); }
-#line 1612 "jsonpath_gram.c"
+#line 1600 "jsonpath_gram.c"
     break;
 
   case 45: /* expr: '+' expr  */
 #line 209 "jsonpath_gram.y"
                                                 { (yyval.value) = makeItemUnary(jpiPlus, (yyvsp[0].value)); }
-#line 1618 "jsonpath_gram.c"
+#line 1606 "jsonpath_gram.c"
     break;
 
   case 46: /* expr: '-' expr  */
 #line 210 "jsonpath_gram.y"
                                                 { (yyval.value) = makeItemUnary(jpiMinus, (yyvsp[0].value)); }
-#line 1624 "jsonpath_gram.c"
+#line 1612 "jsonpath_gram.c"
     break;
 
   case 47: /* expr: expr '+' expr  */
 #line 211 "jsonpath_gram.y"
                                                         { (yyval.value) = makeItemBinary(jpiAdd, (yyvsp[-2].value), (yyvsp[0].value)); }
-#line 1630 "jsonpath_gram.c"
+#line 1618 "jsonpath_gram.c"
     break;
 
   case 48: /* expr: expr '-' expr  */
 #line 212 "jsonpath_gram.y"
                                                         { (yyval.value) = makeItemBinary(jpiSub, (yyvsp[-2].value), (yyvsp[0].value)); }
-#line 1636 "jsonpath_gram.c"
+#line 1624 "jsonpath_gram.c"
     break;
 
   case 49: /* expr: expr '*' expr  */
 #line 213 "jsonpath_gram.y"
                                                         { (yyval.value) = makeItemBinary(jpiMul, (yyvsp[-2].value), (yyvsp[0].value)); }
-#line 1642 "jsonpath_gram.c"
+#line 1630 "jsonpath_gram.c"
     break;
 
   case 50: /* expr: expr '/' expr  */
 #line 214 "jsonpath_gram.y"
                                                         { (yyval.value) = makeItemBinary(jpiDiv, (yyvsp[-2].value), (yyvsp[0].value)); }
-#line 1648 "jsonpath_gram.c"
+#line 1636 "jsonpath_gram.c"
     break;
 
   case 51: /* expr: expr '%' expr  */
 #line 215 "jsonpath_gram.y"
                                                         { (yyval.value) = makeItemBinary(jpiMod, (yyvsp[-2].value), (yyvsp[0].value)); }
-#line 1654 "jsonpath_gram.c"
+#line 1642 "jsonpath_gram.c"
     break;
 
   case 52: /* index_elem: expr  */
 #line 219 "jsonpath_gram.y"
                                                                 { (yyval.value) = makeItemBinary(jpiSubscript, (yyvsp[0].value), NULL); }
-#line 1660 "jsonpath_gram.c"
+#line 1648 "jsonpath_gram.c"
     break;
 
   case 53: /* index_elem: expr TO_P expr  */
 #line 220 "jsonpath_gram.y"
                                                         { (yyval.value) = makeItemBinary(jpiSubscript, (yyvsp[-2].value), (yyvsp[0].value)); }
-#line 1666 "jsonpath_gram.c"
+#line 1654 "jsonpath_gram.c"
     break;
 
   case 54: /* index_list: index_elem  */
 #line 224 "jsonpath_gram.y"
                                                                 { (yyval.indexs) = list_make1((yyvsp[0].value)); }
-#line 1672 "jsonpath_gram.c"
+#line 1660 "jsonpath_gram.c"
     break;
 
   case 55: /* index_list: index_list ',' index_elem  */
 #line 225 "jsonpath_gram.y"
                                                 { (yyval.indexs) = lappend((yyvsp[-2].indexs), (yyvsp[0].value)); }
-#line 1678 "jsonpath_gram.c"
+#line 1666 "jsonpath_gram.c"
     break;
 
   case 56: /* array_accessor: '[' '*' ']'  */
 #line 229 "jsonpath_gram.y"
                                                                 { (yyval.value) = makeItemType(jpiAnyArray); }
-#line 1684 "jsonpath_gram.c"
+#line 1672 "jsonpath_gram.c"
     break;
 
   case 57: /* array_accessor: '[' index_list ']'  */
 #line 230 "jsonpath_gram.y"
                                                 { (yyval.value) = makeIndexArray((yyvsp[-1].indexs)); }
-#line 1690 "jsonpath_gram.c"
+#line 1678 "jsonpath_gram.c"
     break;
 
   case 58: /* any_level: INT_P  */
 #line 234 "jsonpath_gram.y"
                                                                 { (yyval.integer) = pg_strtoint32((yyvsp[0].str).val); }
-#line 1696 "jsonpath_gram.c"
+#line 1684 "jsonpath_gram.c"
     break;
 
   case 59: /* any_level: LAST_P  */
 #line 235 "jsonpath_gram.y"
                                                                 { (yyval.integer) = -1; }
-#line 1702 "jsonpath_gram.c"
+#line 1690 "jsonpath_gram.c"
     break;
 
   case 60: /* any_path: ANY_P  */
 #line 239 "jsonpath_gram.y"
                                                                 { (yyval.value) = makeAny(0, -1); }
-#line 1708 "jsonpath_gram.c"
+#line 1696 "jsonpath_gram.c"
     break;
 
   case 61: /* any_path: ANY_P '{' any_level '}'  */
 #line 240 "jsonpath_gram.y"
                                                 { (yyval.value) = makeAny((yyvsp[-1].integer), (yyvsp[-1].integer)); }
-#line 1714 "jsonpath_gram.c"
+#line 1702 "jsonpath_gram.c"
     break;
 
   case 62: /* any_path: ANY_P '{' any_level TO_P any_level '}'  */
 #line 242 "jsonpath_gram.y"
                                                                         { (yyval.value) = makeAny((yyvsp[-3].integer), (yyvsp[-1].integer)); }
-#line 1720 "jsonpath_gram.c"
+#line 1708 "jsonpath_gram.c"
     break;
 
   case 63: /* accessor_op: '.' key  */
 #line 246 "jsonpath_gram.y"
                                                                 { (yyval.value) = (yyvsp[0].value); }
-#line 1726 "jsonpath_gram.c"
+#line 1714 "jsonpath_gram.c"
     break;
 
   case 64: /* accessor_op: '.' '*'  */
 #line 247 "jsonpath_gram.y"
                                                                 { (yyval.value) = makeItemType(jpiAnyKey); }
-#line 1732 "jsonpath_gram.c"
+#line 1720 "jsonpath_gram.c"
     break;
 
   case 65: /* accessor_op: array_accessor  */
 #line 248 "jsonpath_gram.y"
                                                         { (yyval.value) = (yyvsp[0].value); }
-#line 1738 "jsonpath_gram.c"
+#line 1726 "jsonpath_gram.c"
     break;
 
   case 66: /* accessor_op: '.' any_path  */
 #line 249 "jsonpath_gram.y"
                                                         { (yyval.value) = (yyvsp[0].value); }
-#line 1744 "jsonpath_gram.c"
+#line 1732 "jsonpath_gram.c"
     break;
 
   case 67: /* accessor_op: '.' method '(' ')'  */
 #line 250 "jsonpath_gram.y"
                                                 { (yyval.value) = makeItemType((yyvsp[-2].optype)); }
-#line 1750 "jsonpath_gram.c"
+#line 1738 "jsonpath_gram.c"
     break;
 
   case 68: /* accessor_op: '.' DATETIME_P '(' opt_datetime_template ')'  */
 #line 252 "jsonpath_gram.y"
                                                                         { (yyval.value) = makeItemUnary(jpiDatetime, (yyvsp[-1].value)); }
-#line 1756 "jsonpath_gram.c"
+#line 1744 "jsonpath_gram.c"
     break;
 
   case 69: /* accessor_op: '?' '(' predicate ')'  */
 #line 253 "jsonpath_gram.y"
                                                 { (yyval.value) = makeItemUnary(jpiFilter, (yyvsp[-1].value)); }
-#line 1762 "jsonpath_gram.c"
+#line 1750 "jsonpath_gram.c"
     break;
 
   case 70: /* datetime_template: STRING_P  */
 #line 257 "jsonpath_gram.y"
                                                                 { (yyval.value) = makeItemString(&(yyvsp[0].str)); }
-#line 1768 "jsonpath_gram.c"
+#line 1756 "jsonpath_gram.c"
     break;
 
   case 71: /* opt_datetime_template: datetime_template  */
 #line 261 "jsonpath_gram.y"
                                                         { (yyval.value) = (yyvsp[0].value); }
-#line 1774 "jsonpath_gram.c"
+#line 1762 "jsonpath_gram.c"
     break;
 
   case 72: /* opt_datetime_template: %empty  */
 #line 262 "jsonpath_gram.y"
                                                         { (yyval.value) = NULL; }
-#line 1780 "jsonpath_gram.c"
+#line 1768 "jsonpath_gram.c"
     break;
 
   case 73: /* key: key_name  */
 #line 266 "jsonpath_gram.y"
                                                                 { (yyval.value) = makeItemKey(&(yyvsp[0].str)); }
-#line 1786 "jsonpath_gram.c"
+#line 1774 "jsonpath_gram.c"
     break;
 
   case 98: /* method: ABS_P  */
 #line 297 "jsonpath_gram.y"
                                                                 { (yyval.optype) = jpiAbs; }
-#line 1792 "jsonpath_gram.c"
+#line 1780 "jsonpath_gram.c"
     break;
 
   case 99: /* method: SIZE_P  */
 #line 298 "jsonpath_gram.y"
                                                                 { (yyval.optype) = jpiSize; }
-#line 1798 "jsonpath_gram.c"
+#line 1786 "jsonpath_gram.c"
     break;
 
   case 100: /* method: TYPE_P  */
 #line 299 "jsonpath_gram.y"
                                                                 { (yyval.optype) = jpiType; }
-#line 1804 "jsonpath_gram.c"
+#line 1792 "jsonpath_gram.c"
     break;
 
   case 101: /* method: FLOOR_P  */
 #line 300 "jsonpath_gram.y"
                                                                 { (yyval.optype) = jpiFloor; }
-#line 1810 "jsonpath_gram.c"
+#line 1798 "jsonpath_gram.c"
     break;
 
   case 102: /* method: DOUBLE_P  */
 #line 301 "jsonpath_gram.y"
                                                                 { (yyval.optype) = jpiDouble; }
-#line 1816 "jsonpath_gram.c"
+#line 1804 "jsonpath_gram.c"
     break;
 
   case 103: /* method: CEILING_P  */
 #line 302 "jsonpath_gram.y"
                                                                 { (yyval.optype) = jpiCeiling; }
-#line 1822 "jsonpath_gram.c"
+#line 1810 "jsonpath_gram.c"
     break;
 
   case 104: /* method: KEYVALUE_P  */
 #line 303 "jsonpath_gram.y"
                                                         { (yyval.optype) = jpiKeyValue; }
-#line 1828 "jsonpath_gram.c"
+#line 1816 "jsonpath_gram.c"
     break;
 
 
-#line 1832 "jsonpath_gram.c"
+#line 1820 "jsonpath_gram.c"
 
       default: break;
     }
@@ -1910,6 +1898,7 @@
      label yyerrorlab therefore never appears in user code.  */
   if (0)
     YYERROR;
+  ++yynerrs;
 
   /* Do not reclaim the symbols of the rule whose action triggered
      this YYERROR.  */
@@ -1970,7 +1959,7 @@
 `-------------------------------------*/
 yyacceptlab:
   yyresult = 0;
-  goto yyreturn;
+  goto yyreturnlab;
 
 
 /*-----------------------------------.
@@ -1978,24 +1967,22 @@
 `-----------------------------------*/
 yyabortlab:
   yyresult = 1;
-  goto yyreturn;
+  goto yyreturnlab;
 
 
-#if !defined yyoverflow
-/*-------------------------------------------------.
-| yyexhaustedlab -- memory exhaustion comes here.  |
-`-------------------------------------------------*/
+/*-----------------------------------------------------------.
+| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
+`-----------------------------------------------------------*/
 yyexhaustedlab:
   yyerror (result, escontext, YY_("memory exhausted"));
   yyresult = 2;
-  goto yyreturn;
-#endif
+  goto yyreturnlab;
 
 
-/*-------------------------------------------------------.
-| yyreturn -- parsing is finished, clean up and return.  |
-`-------------------------------------------------------*/
-yyreturn:
+/*----------------------------------------------------------.
+| yyreturnlab -- parsing is finished, clean up and return.  |
+`----------------------------------------------------------*/
+yyreturnlab:
   if (yychar != YYEMPTY)
     {
       /* Make sure we have latest lookahead translation.  See comments at
