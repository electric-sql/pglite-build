--- duckdb-wasm/submodules/duckdb/src/include/duckdb/common/helper.hpp	2024-06-05 23:12:32.071226596 +0200
+++ duckdb-pglite/submodules/duckdb/src/include/duckdb/common/helper.hpp	2024-06-05 09:58:27.456492306 +0200
@@ -58,7 +58,7 @@
 };
 
 template<class DATA_TYPE, class... ARGS>
-inline 
+inline
 typename TemplatedUniqueIf<DATA_TYPE, true>::templated_unique_single_t
 make_uniq(ARGS&&... args) // NOLINT: mimic std style
 {
@@ -66,7 +66,7 @@
 }
 
 template<class DATA_TYPE, class... ARGS>
-inline 
+inline
 shared_ptr<DATA_TYPE>
 make_shared_ptr(ARGS&&... args) // NOLINT: mimic std style
 {
@@ -74,7 +74,7 @@
 }
 
 template<class DATA_TYPE, class... ARGS>
-inline 
+inline
 typename TemplatedUniqueIf<DATA_TYPE, false>::templated_unique_single_t
 make_unsafe_uniq(ARGS&&... args) // NOLINT: mimic std style
 {
@@ -155,7 +155,7 @@
 template <class T, class... ARGS>
 static duckdb::shared_ptr<T> make_shared(ARGS&&... __args) { // NOLINT: mimic std style
 #ifndef DUCKDB_ENABLE_DEPRECATED_API
-	static_assert(sizeof(T) == 0, "Use make_shared_ptr instead of make_shared!");
+	// static_assert(sizeof(T) == 0, "Use make_shared_ptr instead of make_shared!");
 #endif // DUCKDB_ENABLE_DEPRECATED_API
 	return shared_ptr<T>(new T(std::forward<ARGS>(__args)...));
 }
